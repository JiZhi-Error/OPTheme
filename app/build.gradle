apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// 加载本地keystore.properties中的签名配置
def keyPropertiesFile = rootProject.file("keystore.properties")
def keyProperties = new Properties()
if (keyPropertiesFile.exists()) {
    keyProperties.load(new FileInputStream(keyPropertiesFile))
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

//        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [ AROUTER_MODULE_NAME: project.getName() ]
//            }
//        }

        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "arm64-v8a"
        }

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }

//        //ARouter添加的
//        kapt {
//            arguments {
//                arg("AROUTER_MODULE_NAME", project.getName())
//            }
//        }

        //定义网络请求成功返回码 baseurl  日志打印  切换环境  在代码中BuildConfig.BASE_URL去使用
        buildConfigField "String", "CODE_SUCCESS", getCodeSuccess()
        buildConfigField "String", "CODELIST_SUCCESS", getCodeListSuccess()
        buildConfigField "String", "WANANDROID_CODELIST_SUCCESS", getWanAndroidCodeListSuccess()
        buildConfigField "String", "GANK_CODELIST_SUCCESS", getGankCodeListSuccess()
        buildConfigField "String", "BASE_URL", getBaseUrl()
        buildConfigField "boolean", "OPEN_LOG", getOpenLog()
        buildConfigField "boolean", "OPEN_CHANGE", getOpenChange()
        buildConfigField "boolean", "OPEN_AROUTER", getOpenARouter()
    }

    buildFeatures {
        dataBinding true
    }

    signingConfigs {
        release {
            storeFile     file("../jizhi.jks")
            storePassword keyProperties.containsKey("KEYSTORE_PASS") ? keyProperties['KEYSTORE_PASS'] : System.getenv("KEYSTORE_PASS")
            keyAlias      keyProperties.containsKey("ALIAS_NAME")    ? keyProperties['ALIAS_NAME']    : System.getenv("ALIAS_NAME")
            keyPassword   keyProperties.containsKey("ALIAS_PASS")    ? keyProperties['ALIAS_PASS']    : System.getenv("ALIAS_PASS")
        }
    }

    // 取消png验证
    aaptOptions { cruncherEnabled = false }

    buildTypes {
        debug {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        release {
            // 混淆
            zipAlignEnabled true
            debuggable false
            minifyEnabled true //是否混淆
            shrinkResources true //是否去除无效的资源文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            multiDexEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

//相关配置的获取方法及其处理
def getOpenLog() {
    return "${OPEN_LOG}"
}

def getOpenChange() {
    return "${OPEN_CHANGE}"
}

def getOpenARouter() {
    return "${OPEN_AROUTER}"
}

def getBaseUrl() {
    //最后没有斜杠，需要手动拼接
    return "\"" + String.valueOf(BASE_URL).trim() + "/\""
}

def getCodeSuccess() {
    return "\"" + String.valueOf(CODE_SUCCESS) + "\""
}

def getCodeListSuccess() {
    return "\"" + String.valueOf(CODELIST_SUCCESS) + "\""
}

def getWanAndroidCodeListSuccess() {
    return "\"" + String.valueOf(WANANDROID_CODELIST_SUCCESS) + "\""
}

def getGankCodeListSuccess() {
    return "\"" + String.valueOf(GANK_CODELIST_SUCCESS) + "\""
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    //hulk引入
    api project(':libhulk')
    //arouter
    api rootProject.ext.dependencies["arouter"]
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    kapt rootProject.ext.dependencies["arouter-compiler"]

//    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
//    implementation 'androidx.core:core-ktx:1.3.1'
//    implementation 'androidx.appcompat:appcompat:1.1.0'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

//    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
//    implementation "com.jeremyliao:live-event-bus-x:1.7.2"

    //  QMUI_Android  https://github.com/Tencent/QMUI_Android
    implementation 'com.qmuiteam:qmui:2.0.0-alpha10'

    //  Glide  https://github.com/bumptech/glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

}